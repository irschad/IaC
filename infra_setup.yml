Description: >
    Project Udagram
Parameters:

    EnvName:
        Description: Environment name to be prefixed to resources
        Type: String

    VPCCIDRBlock:
        Description: VPC CIDR Block
        Type: String
        Default: 10.0.0.0/16

    PubSubnet1CIDR:
        Description: CIDR range for Public Subnet 1
        Type: String
        Default: 10.0.0.0/24

    PubSubnet2CIDR:
        Description: CIDR range for Public Subnet 2
        Type: String
        Default: 10.0.1.0/24
        
    PrivSubnet1CIDR:
        Description: CIDR range for Private Subnet 1
        Type: String
        Default: 10.0.2.0/24

    PrivSubnet2CIDR:
        Description: CIDR range for Private Subnet 2
        Type: String
        Default: 10.0.3.0/24
 
Resources:

    VPC:
        Type: AWS::EC2::VPC
        Properties:
          CidrBlock: !Ref VPCCIDRBlock
          EnableDnsHostnames: true
          Tags:
              - Key: Name
                Value: !Ref EnvName

    PrivSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref VPC 
          AvailabilityZone: !Select [ 0, !GetAZs '' ]
          CidrBlock: !Ref PrivSubnet1CIDR
          MapPublicIpOnLaunch: false
          Tags: 
              - Key: Name
                Value: !Sub ${EnvName} Private Subnet (AZ1)
        
    PrivSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 1, !GetAZs '' ]
          CidrBlock: !Ref PrivSubnet2CIDR
          MapPublicIpOnLaunch: false
          Tags: 
              - Key: Name
                Value: !Sub ${EnvName} Private Subnet (AZ2)
    
    PubSubnet1:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref VPC 
          AvailabilityZone: !Select [ 0, !GetAZs '' ]
          CidrBlock: !Ref PubSubnet1CIDR
          MapPublicIpOnLaunch: false
          Tags: 
              - Key: Name
                Value: !Sub ${EnvName} Public Subnet (AZ1)
          
    PubSubnet2:
        Type: AWS::EC2::Subnet
        Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 1, !GetAZs '' ]
          CidrBlock: !Ref PubSubnet2CIDR
          MapPublicIpOnLaunch: false
          Tags: 
              - Key: Name
                Value: !Sub ${EnvName} Public Subnet (AZ2)

    InternetGateway: 
        Type: AWS::EC2::InternetGateway

    IGAttachment:
        Type:  AWS::EC2::VPCGatewayAttachment 
        Properties: 
          VpcId: !Ref VPC 
          InternetGatewayId: !Ref InternetGateway

    NATGateway1EIP:
        Type: AWS::EC2::EIP
        DependsOn: IGAttachment
        Properties: 
            Domain: vpc

    NATGateway1: 
        Type: AWS::EC2::NatGateway
        Properties: 
            AllocationId: !GetAtt NATGateway1EIP.AllocationId
            SubnetId: !Ref PubSubnet1

    NATGateway2EIP:
        Type: AWS::EC2::EIP
        DependsOn: IGAttachment
        Properties:
            Domain: vpc
    
    NATGateway2: 
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NATGateway2EIP.AllocationId
            SubnetId: !Ref PubSubnet2
     
    PubRouteTable:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvName} Public Routes

    DefaultPubRoute: 
        Type: AWS::EC2::Route
        DependsOn: IGAttachment
        Properties: 
            RouteTableId: !Ref PubRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway
    
    PubSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PubRouteTable
            SubnetId: !Ref PubSubnet1

    PubSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PubRouteTable
            SubnetId: !Ref PubSubnet2
            
    PrivRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            
    DefaultPrivRoute1:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivRouteTable1
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NATGateway1

    PrivSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivRouteTable1
            SubnetId: !Ref PrivSubnet1

    PrivRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
           
    DefaultPrivRoute2:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivRouteTable2
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NATGateway2

    PrivSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivRouteTable2
            SubnetId: !Ref PrivSubnet2
    
    UdagramS3ReadOnlyEC2:
        Type: AWS::IAM::Role
        Properties:
            RoleName: 
                !Sub ${EnvName}-Role
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                -   Effect: Allow
                    Principal:
                        Service:
                        - ec2.amazonaws.com
                    Action:
                    - sts:AssumeRole
            Path: "/"

    RolePolicies:
        Type: AWS::IAM::Policy
        Properties:
            PolicyName: AmazonS3ReadOnlyAccess
            PolicyDocument:
                Version: '2012-10-17'
                Statement:
                - 
                    Effect: Allow
                    Action: 
                    -   s3:Get*
                    -   s3:List*
                    Resource: 
                    -   arn:aws:s3:::udacity-demo-1893
                    -   arn:aws:s3:::udacity-demo-1893/*
            Roles:
            -   Ref: UdagramS3ReadOnlyEC2

    ProfileWithRolesForUdagramApp:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: "/"
            Roles:
            - Ref: UdagramS3ReadOnlyEC2

    LoadBalancerSecurityGroup:
            Type: AWS::EC2::SecurityGroup
            Properties:
                GroupDescription: This is to allow http traffic to and from the load balancer
                VpcId: !Ref VPC
                SecurityGroupIngress:
                -   IpProtocol: tcp
                    FromPort: 80
                    ToPort: 80
                    CidrIp: 0.0.0.0/0
                SecurityGroupEgress:
                -   IpProtocol: tcp
                    FromPort: 80
                    ToPort: 80
                    CidrIp: 0.0.0.0/0

    ApacheServerSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: This is to allow http and ssh to the load balancer
            VpcId: !Ref VPC
            SecurityGroupIngress:
            -   IpProtocol: tcp
                FromPort: 80
                ToPort: 80
                CidrIp: 0.0.0.0/0
            -   IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
            -   IpProtocol: tcp
                FromPort: 0
                ToPort: 65535
                CidrIp: 0.0.0.0/0

    UdaAppLaunchConfig: 
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    apt-get update -y
                    apt-get install unzip awscli -y
                    apt-get install apache2 -y
                    systemctl start apache2.service
                    cd /var/www/html
                    aws s3 cp s3://udacity-demo-1893/udagram.zip .
                    unzip -o udagram.zip            
            ImageId: ami-0a634ae95e11c6f91
            IamInstanceProfile: !Ref ProfileWithRolesForUdagramApp
            SecurityGroups:
            -   Ref: ApacheServerSecurityGroup
            InstanceType: t3.micro
            BlockDeviceMappings:
            -   DeviceName: "/dev/sdk"
                Ebs:
                    VolumeSize: '10' #10GB

    UdaAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 30
            HealthCheckPath: /
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 6
            HealthyThresholdCount: 2
            Port: 80
            Protocol: HTTP
            UnhealthyThresholdCount: 2
            VpcId: !Ref VPC

    UdaAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:  
            - !Ref PrivSubnet1
            - !Ref PrivSubnet2 
            LaunchConfigurationName:
                Ref: UdaAppLaunchConfig
            MinSize: '4'
            MaxSize: '8'
            HealthCheckGracePeriod: '2'
            TargetGroupARNs:
            -   Ref: UdaAppTargetGroup

    UdaAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            SecurityGroups:
            - Ref: LoadBalancerSecurityGroup
            Subnets:
            - !Ref PubSubnet1
            - !Ref PubSubnet2
    Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
            DefaultActions:
            -   Type: forward
                TargetGroupArn:
                    Ref: UdaAppTargetGroup
            LoadBalancerArn:
                Ref: UdaAppLB
            Port: 80
            Protocol: HTTP

    ALBListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            Actions:
            -   Type: forward
                TargetGroupArn: !Ref 'UdaAppTargetGroup'
            Conditions:
            -   Field: path-pattern
                Values: [/]
            ListenerArn: !Ref 'Listener'
            Priority: 1
            
Outputs:

    VPC:
        Description: A reference to the VPC created
        Value: !Ref VPC
        Export:
          Name: !Sub ${EnvName}-VPCID

    UdagramLoadBalancerURL:
        Description: Public URL of the Load Balancer
        Value: !Join [ "", [ 'http://', !GetAtt UdaAppLB.DNSName ]]
        Export:
          Name: !Sub ${EnvName}-LB-URL
    
         